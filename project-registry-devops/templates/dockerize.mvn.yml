# This template is expects exactly ONE Dockerfile in the microservice repo
# This template utilizes an external dependency called mvn-version-1.2.1 to 
# extract the version of the Maven pom.xml file, which is then used as the
# tag for the docker image that is pushed.

parameters:

  # project configuration parameters:
- name: imageName                   # <-- e.g., project-registry-gateway
  type: string
- name: containerRepo               # <-- e.g., myproject.azurecr.io, myDockerHub
  type: string
- name: containerServiceConnection  # <-- name of the service connection associated
  type: string                      #     with the above repo
- name: containerUrl                # <-- URL to the associated repo
  type: string
  default: "public link unavailable"
- name: version                     # <-- you should only use this parameter if the value of
  type: string                      #     useDynamicVersion is set to false, otherwise it is 
  default: undefined                #     overwritten dynamically using mvn-version-1.2.1
- name: useDynamicVersion           # <-- if this is set to false then it will use the value
  type: boolean                     #     specified by parameters.version rather than the version
  default: true                     #     pulled from the pom.xml file (default behavior)

  # external access parameters:
- name: discordChannel
  type: string
- name: discordKey
  type: string

steps:
- ${{ if eq(parameters.useDynamicVersion, true) }}:
  - script: |
      command -v mvn-version >/dev/null 2>&1 || 
      MVN_VERSION_DOWNLOAD='https://github.com/emcrisostomo/mvn-version/archive/refs/tags/1.2.1.tar.gz' &&
      curl -L $MVN_VERSION_DOWNLOAD | tee 1.2.1.tar.gz | tar zx -C . &&
      sudo apt-get update && sudo apt-get install zsh xmlstarlet -y &&
      cd mvn-version-1.2.1 &&
      sudo ./autogen.sh &&
      sudo ./configure &&
      sudo make &&
      sudo make install 
    displayName: Install mvn-version --> Task
      
  - script: |
      VERSION=$(mvn-version .) &&
      echo extracted $VERSION &&
      echo "##vso[task.setvariable variable=version]$VERSION"
    displayName: Extract microservice version from pom.xml file --> Task

  - task: Docker@2
    inputs:
      containerRegistry: ${{ parameters.containerServiceConnection }}
      repository: '${{ parameters.imageName }}'
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'
      tags: '$(version)'
    displayName: Dockerize ${{ parameters.imageName }} and push --> Task

  - task: ado-discord-webhook@1
    condition: always()
    inputs:
      channelId: ${{ parameters.discordChannel }}
      webhookKey: ${{ parameters.discordKey }}
      name: '$(System.TeamProject) Dockerize - $(Build.BuildId)'
      avatar: 'https://about.gitlab.com/images/devops-tools/azure-cr-logo.png'
      messageType: 'content'
      content: |
        **__Dockerization Report__**
        **Status:** $(Agent.JobStatus)
        **Branch:** $(Build.SourceBranch)
        **Trigger:** $(Build.Reason)
        **Message:** $(Build.SourceVersionMessage)
        **Image:** ${{ parameters.imageName }}:$(version)
        **Container Repo:** <${{ parameters.containerUrl }}>
        **Logs:** <$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=logs>
        **Repo:** <$(Build.Repository.Uri)/tree/$(Build.SourceBranchName)>
    displayName: Notification --> Task

- ${{ if eq(parameters.useDynamicVersion, false) }}:
  - task: Docker@2
    inputs:
      containerRegistry: ${{ parameters.containerServiceConnection }}
      repository: '${{ parameters.imageName }}'
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'
      tags: ${{ parameters.version }}
    displayName: Dockerize ${{ parameters.imageName }} and push --> Task
  
  - task: ado-discord-webhook@1
    condition: always()
    inputs:
      channelId: ${{ parameters.discordChannel }}
      webhookKey: ${{ parameters.discordKey }}
      name: '$(System.TeamProject) Dockerize - $(Build.BuildId)'
      avatar: 'https://about.gitlab.com/images/devops-tools/azure-cr-logo.png'
      messageType: 'content'
      content: |
        **__Dockerization Report__**
        **Status:** $(Agent.JobStatus)
        **Branch:** $(Build.SourceBranch)
        **Trigger:** $(Build.Reason)
        **Message:** $(Build.SourceVersionMessage)
        **Image:** ${{ parameters.imageName }}:${{ parameters.version }}
        **Container Repo:** <${{ parameters.containerUrl }}>
        **Logs:** <$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=logs>
        **Repo:** <$(Build.Repository.Uri)/tree/$(Build.SourceBranchName)>
    displayName: Notification --> Task
