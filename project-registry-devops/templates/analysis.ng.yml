# this template performs static analysis on an angular build project

parameters:
- name: microservice  # <-- It is assumed that the angular portion will be the frontend
  type: string        #     however, it can be overwritten should the need arise
  default: frontend
- name: workDir       # <-- The working directory, can be relative or absolute, expects
  type: string        #     a trailing '/' character.
- name: coveragePath  # <-- The path to all the files that should be included in the code
  type: string        #     coverage

# external access parameters:
- name: sonarKeyPrefix
  type: string
- name: sonarNamePrefix
  type: string
- name: sonarOrg
  type: string
- name: sonarUrlPrefix
  type: string
- name: discordChannel
  type: string
- name: discordKey
  type: string

steps:

###  Need to come back and review this task later
- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'SonarCloud'
    organization: ${{ parameters.sonarOrg }}
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: ${{ parameters.sonarKeyPrefix }}${{ parameters.microservice }}
    cliSources: '${{ parameters.workDir }}src,${{ parameters.workDir }}e2e'
    extraProperties: |
      sonar.coverage.exclusions=**/*.spec.ts,${{ parameters.workDir }}e2e/**/*
      sonar.javascript.lcov.reportPaths=${{ parameters.workDir }}/coverage/${{ parameters.workDir }}/lcov.info
  displayName: Prepare Analysis for ${{ parameters.microservice }} --> Task

- script: npm ci
  workingDirectory: ${{ parameters.workDir }}
  displayName: Install dependencies for ${{ parameters.microservice }} --> Task

- script: npx ng build --prod
  workingDirectory: ${{ parameters.workDir }}
  displayName: Build ${{ parameters.microservice }} --> Task

# this step is pending fixes from Andrew, or the devs
- script: npx ng test --browsers ChromeHeadless --no-watch --code-coverage
  continueOnError: true
  workingDirectory: ${{ parameters.workDir }}
  displayName: Test ${{ parameters.microservice }} --> Task

- task: SonarCloudAnalyze@1
  condition: always()
  displayName: Analyze ${{ parameters.microservice }} --> Task

- task: SonarCloudPublish@1
  condition: always()
  inputs:
    pollingTimeoutSec: '300'
  displayName: Publish Analysis of ${{ parameters.microservice }} --> Task

- task: 'ado-discord-webhook@1' # <-- See external requirements note above
  condition: and(always(), ne(variables['Build.Reason'],'PullRequest'))
  inputs:
    channelId: ${{ parameters.discordChannel }}
    webhookKey: ${{ parameters.discordKey }}
    name: $(System.TeamProject) Analysis - $(Build.BuildId)
    avatar: 'https://avatars2.githubusercontent.com/u/39168408?s=460&v=4'
    messageType: 'content'
    content: | 
      **__Analysis Report__**
      **Status:** $(Agent.JobStatus)
      **Branch:** $(Build.SourceBranch)
      **Trigger:** $(Build.Reason)
      **Message:** $(Build.SourceVersionMessage)
      **Report:** <${{ parameters.sonarUrlPrefix }}$(Build.SourceBranchName)&id=${{ parameters.sonarKeyPrefix }}${{ parameters.microservice }}>
      **Logs:** <$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=logs>
      **Repo:** <$(Build.Repository.Uri)/tree/$(Build.SourceBranchName)>
  displayName: Notification --> Task

- task: 'ado-discord-webhook@1' # <-- See external requirements note above
  condition: and(always(), eq(variables['Build.Reason'],'PullRequest'))
  inputs:
    channelId: ${{ parameters.discordChannel }}
    webhookKey: ${{ parameters.discordKey }}
    name: $(System.TeamProject) PR Analysis - $(Build.BuildId)
    avatar: 'https://github.com/jpbulloch5/jpbulloch5.github.io/blob/main/GitHubPR.png?raw=true'
    messageType: 'content'
    content: | 
      **__PR Analysis Report__**
      **Status:** $(Agent.JobStatus)
      **Report:** <${{ parameters.sonarUrlPrefix }}$(System.PullRequest.SourceBranch)&id=${{ parameters.sonarKeyPrefix }}${{ parameters.microservice }}>
      **Logs:** <$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=logs>
      **Source:** <$(Build.Repository.Uri)/tree/$(System.PullRequest.SourceBranch)>
      **Target:** <$(Build.Repository.Uri)/tree/$(System.PullRequest.TargetBranch)>
      **Pulls:** <$(System.PullRequest.SourceRepositoryURI)/pulls>
  displayName: PR Notification --> Task
